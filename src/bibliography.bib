
% file: papers/tillmann-mock_gen_behaviour.pdf
@inproceedings{tillman:mock_gen_behaviour,
 author = {Tillmann, Nikolai and Schulte, Wolfram},
 title = {Mock-object generation with behavior},
 booktitle = {Proceedings of the 21st IEEE/ACM International
                  Conference on Automated Software Engineering},
 series = {ASE '06},
 year = {2006},
 isbn = {0-7695-2579-2},
 pages = {365--368},
 numpages = {4},
 url = {http://dx.doi.org/10.1109/ASE.2006.51},
 doi = {10.1109/ASE.2006.51},
 acmid = {1169355},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

% file: papers/saff-mock_test_factoring.pdf
@inproceedings{saff:mock_test_factoring,
 author = {Saff, David and Ernst, Michael D.},
 title = {Mock object creation for test factoring},
 booktitle = {Proceedings of the 5th ACM SIGPLAN-SIGSOFT workshop on
                  Program analysis for software tools and engineering},
 series = {PASTE '04},
 year = {2004},
 isbn = {1-58113-910-1},
 location = {Washington DC, USA},
 pages = {49--51},
 numpages = {3},
 url = {http://doi.acm.org/10.1145/996821.996838},
 doi = {10.1145/996821.996838},
 acmid = {996838},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {mock objects, test factoring, unit testing},
}

% file: papers/thomas-mock_objects.pdf
@ARTICLE{thomas:mock_objects,
author={Thomas, D. and Hunt, A.},
journal={Software, IEEE}, title={Mock objects},
year={2002},
month={May/Jun},
volume={19},
number={3},
pages={22 -24},
abstract={One thing that makes unit-testing code so hard is the way
                  the real world keeps intruding. If all we had to do
                  was code up tests for methods that sort arrays or
                  generate Fibonacci series, life would be easy. In
                  the real world we have to test code that uses
                  databases, communications devices, user interfaces,
                  and external applications. We might have to
                  interface to devices that are not yet available or
                  simulate network errors that are impossible to
                  generate locally. This all conspires to stop our
                  unit tests from being neat, self-contained (and
                  orthogonal) chunks of code. Fortunately there is a
                  testing pattern that can help. The authors consider
                  the use of mock objects. With mock objects you can
                  test code in splendid isolation, simulating all
                  those messy real-world things that would otherwise
                  make automated testing impossible. As with many
                  other testing practices, the discipline of using
                  mock objects can improve your code's structure},
keywords={Automatic testing;Containers;Java;Logic;Packaging;
                  Programming profession;Temperature;User
                  interfaces;Web server;Writing;object-oriented
                  programming;program testing;automated testing;code
                  structure;code unit-testing;mock objects;object
                  oriented programming;software testing;testing
                  pattern;},
doi={10.1109/MS.2002.1003449},
ISSN={0740-7459},
}

% file: papers/freeman-mock_roles.pdf
@inproceedings{freeman:mock_roles,
 author = {Freeman, Steve and Mackinnon, Tim and Pryce, Nat and Walnes, Joe},
 title = {Mock roles, objects},
 booktitle = {Companion to the 19th annual ACM SIGPLAN conference on
                  Object-oriented programming systems, languages, and
                  applications},
 series = {OOPSLA '04},
 year = {2004},
 isbn = {1-58113-833-4},
 location = {Vancouver, BC, CANADA},
 pages = {236--246},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1028664.1028765},
 doi = {10.1145/1028664.1028765},
 acmid = {1028765},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {java, mock objects, test-driven development},
}

% This is the xUnit book I have
@book{meszaros:xunit,
 author = {Meszaros, Gerard},
 title = {{xU}nit Test Patterns: Refactoring Test Code},
 year = {2006},
 isbn = {0131495054},
 publisher = {Prentice Hall PTR},
 address = {Upper Saddle River, NJ, USA},
}

% file: papers/marri-fs_mock.pdf
@INPROCEEDINGS{marri:fs_mock,
author={Marri, M.R. and Tao Xie and Tillmann, N. and de Halleux, J. and Schulte, W.},
booktitle={Automation of Software Test, 2009. AST '09. ICSE Workshop
                  on}, title={An empirical study of testing
                  file-system-dependent software with mock objects},
year={2009},
month={May},
volume={},
number={},
pages={149 -153},
abstract={Unit testing is a technique of testing a single unit of a
                  program in isolation. The testability of the unit
                  under test can be reduced when the unit interacts
                  with its environment. The construction of
                  high-covering unit tests and their execution require
                  appropriate interactions with the environment such
                  as a file system or database. To help set up the
                  required environment, developers can use mock
                  objects to simulate the behavior of the
                  environment. In this paper, we present an empirical
                  study to analyze the use of mock objects to test
                  file-system-dependent software. We use a mock object
                  of the FileSystem API provided with the Pex
                  automatic testing tool in our study. We share our
                  insights gained on the benefits of using mock
                  objects in unit testing and discuss the faced
                  challenges.},
keywords={Automatic testing;Computer science;Databases;File
                  systems;Logic;Software testing;System
                  testing;application program interfaces;automatic
                  test equipment;program testing;FileSystem API;Pex
                  automatic testing tool;database;file
                  system;file-system-dependent software testing;mock
                  objects;testability;unit under test;},
doi={10.1109/IWAST.2009.5069054},
ISSN={},}

% file: papers/ho-yeon-net_mock.pdf
@INPROCEEDINGS{ho-yeon:net_mock,
author={Ho-Yeon Ryu and Byeong-Kil Sohn and Jae-Heung Park},
booktitle={Computer and Information Science, 2005. Fourth Annual ACIS
                  International Conference on}, title={Mock objects
                  framework for {TDD} in the network environment},
year={2005},
month={},
volume={},
number={},
pages={ 430 - 434},
abstract={ TDD is a software development approach which is based on
                  test TDD let us get improved code and refined design
                  through lasting test with refactoring
                  process. However, if network or database environment
                  and other object were not developed, TDD could have
                  a problem to make progress. If you will use the mock
                  objects in this situation, TDD will be processed
                  more effectively. To make mock objects needs a lot
                  of cost and effort for network and
                  database. Therefore this paper presents a mock
                  objects frameworks for TDD which can save time and
                  make safe mock objects.},
keywords={Computer science;Costs;Databases;Information
                  science;Intelligent networks;Network
                  servers;Programming;Software testing;User
                  interfaces; object-oriented programming; program
                  testing; software engineering; TDD; agile software
                  development; database environment; extreme
                  programming; lasting test; mock objects; network
                  environment; refactoring process; software code;
                  software design; software testing; test driven
                  development; Agile Software Development; Software
                  Testing; TDD; XP;},
doi={10.1109/ICIS.2005.88},
ISSN={},
}

% file: papers/claessen-quickcheck.pdf
@inproceedings{claessen:quickcheck,
 author = {Claessen, Koen and Hughes, John},
 title = {QuickCheck: a lightweight tool for random testing of Haskell
                  programs},
 booktitle = {Proceedings of the fifth ACM SIGPLAN international
                  conference on Functional programming},
 series = {ICFP '00},
 year = {2000},
 isbn = {1-58113-202-6},
 pages = {268--279},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/351240.351266},
 doi = {10.1145/351240.351266},
 acmid = {351266},
 publisher = {ACM},
 address = {New York, NY, USA},
}

% file: papers/canou-ocaml_random_test.pdf
@inproceedings{canou:ocaml_random_test,
 author = {Canou, Benjamin and Darrasse, Alexis},
 title = {Fast and sound random generation for automated testing and
                  benchmarking in objective Caml},
 booktitle = {Proceedings of the 2009 ACM SIGPLAN workshop on ML},
 series = {ML '09},
 year = {2009},
 isbn = {978-1-60558-509-3},
 location = {Edinburgh, Scotland},
 pages = {61--70},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1596627.1596637},
 doi = {10.1145/1596627.1596637},
 acmid = {1596637},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Boltzmann model, algebraic data types, random generation,
                  specification-based testing},
}

@misc{www:reading_camlp4,
author = {Jake Donham},
title = {Reading {C}amlp4},
howpublished = "\url{http://ambassadortothecomputers.blogspot.co.uk/p/reading-camlp4.html}",
month = Sep,
year = 2012,
}

@misc{www:camlp4,
title = {Camlp4},
howpublished = "\url{http://pauillac.inria.fr/camlp4/}",
month = Mar,
year = 2014,
}

@misc{www:criterion,
author = {Bryan O'Sullivan},
howpublished = "\url{http://www.serpentine.com/blog/2009/09/29/criterion-a-new-benchmarking-library-for-haskell/}",
title = {Criterion, a new benchmarking library for {H}askell},
month = Sep,
year = 2009,
}
@misc{www:ocaml,
key = {ocaml},
title = { {OC}aml },
howpublished = "\url{http://ocaml.org/}",
month = Jan,
year = 2013,
}

@misc{www:ounit,
key = {ounit},
title = { {OU}nit },
howpublished = "\url{http://ounit.forge.ocamlcore.org/}",
month = Jan,
year = 2013,
}

@misc{www:hunit,
key = {hunit},
title = { {HU}nit -- {H}askell unit testing },
howpublished = "\url{http://hunit.sourceforge.net/}",
month = Jan,
year = 2013,
}

@misc{www:ruby:unit,
key = {ruby:unit},
title = {test-unit - a Unit Testing Framework for Ruby},
howpulished = "\url{http://test-unit.rubyforge.org/}",
month = Mar,
year = 2014,
}

@misc{www:rspec,
key = {ruby:rspec},
title = {RSpec.info: home},
howpublished = "\url{http://rspec.info/}",
month = Mar,
year = 2014,
}

@misc{www:junit,
key = {junit},
title = { {JU}nit },
howpublished = "\url{http://www.junit.org/}",
month = Jan,
year = 2013,
}

@misc{www:kaputt,
key = {kaputt},
title = { Kaputt },
howpublished = "\url{http://kaputt.x9c.fr/}",
month = Jan,
year = 2013,
}

@misc{www:jmock,
key = {jmock},
title = { {JM}ock: an expressive mock object library for {J}ava },
howpublished = "\url{http://jmock.org/}",
month = Jan,
year = 2013,
}

@misc{www:moq,
key = {moq},
title = {Moq},
howpublished = "\url{http://www.moqthis.com/}",
month = Mar,
year = 2014,
}

@misc{www:nunit,
key = {nunit},
title = { {NU}nit },
howpublished = "\url{http://www.nunit.org/}",
month = Jan,
year = 2013,
}

@book{beck:tdd,
 author = {Kent Beck},
 title = {Test Driven Development: By Example},
 year = {2002},
 isbn = {0321146530},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
}

@book{freeman:growing,
  title={Growing object-oriented software, guided by tests},
  author={Freeman, Steve and Pryce, Nat},
  year={2009},
  publisher={Pearson Education}
}

@book{humble:continuous,
 author = {Humble, Jez and Farley, David},
 title = {Continuous Delivery: Reliable Software Releases through
                  Build, Test, and Deployment Automation},
 year = {2010},
 isbn = {0321601912, 9780321601919},
 edition = {1st},
 publisher = {Addison-Wesley Professional},
}

@article{gibbons:patterns,
  title = "Design Patterns as Higher-Order Datatype-Generic Programs",
  author = "Jeremy Gibbons",
  year = "2010",
  note = "Submitted for publication; revised version of the WGP2006 paper",
  url = "http://www.comlab.ox.ac.uk/jeremy.gibbons/publications/hodgp-journal.pdf",
}

@techreport{www:nist,
author = {RTI International},
title = { Software Errors Cost U.S. Economy \$59.5 Billion Annually },
institution = {National Institute of Standards and Technology},
month = May,
year = 2002,
note = "\url{http://www.abeacha.com/NIST_press_release_bugs_cost.htm}",
}

@book{mcconnell:code,
author = {Steve McConnell},
title = {Code Complete},
year = 2004,
publisher = {Microsoft Press}
}

@article{boehm:understanding,
  title={Understanding and controlling software costs},
  author={Boehm, Barry W},
  journal={Journal of Parametrics},
  volume={8},
  number={1},
  pages={32--68},
  year={1988},
  publisher={Taylor \& Francis}
}

@article{boehm:software,
  title={Software defect reduction top 10 list},
  author={Boehm, Barry and Basili, Victor R},
  journal={Foundations of empirical software engineering: the legacy of Victor R. Basili},
  volume={426},
  year={2005}
}

@misc{bossavit:leprechauns,
  title={The Leprechauns of Software Engineering},
  author={Bossavit, L},
  year={2012},
  publisher={Leanpub, Vancouver, BC}
}

@article{java,
  title={Java Language Specification},
  author={Arnold, Ken and Holmes, David and Lindholm, Tim and Yellin, Frank and others},
  year={2000},
  publisher={Citeseer}
}

%%%%%%%%%%%%
%% do I want to reference this: http://martinfowler.com/articles/mocksArentStubs.html
