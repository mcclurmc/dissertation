_Thesis outline_

* Intro
  - Quickly describe the idea
  - Motivation
    - Brief tour of software testing
      - Why is testing important?
	- At the most basic, it helps ensure that software is
          functioning according to a specification
	- Piece from NIST about software bugs costing $$$
	- Relative cost of fixing a bug
	- Serves as a demonstration of software quality
	- Can serve to catch regressions
	- Can aid in refactoring
      - What kind of software tests are there?
	- Three levels of tests: unit, component, system (also often
          referred to as unit, integration, and acceptance)
	  - System/acceptance tests
	  - Component/integration tests
	  - Unit tests
	- 
      - What is mocking, and how is it used?
      - Differences between OO and FP styles of testing (or perhaps,
        testability implications of language features)
	- Pure versus impure functions
	- Pure functions can often take advantage of "quickcheck" style testing
	- Types eliminate whole classes of errors
  - Objectives and expected contribution
    - Objectives
      - Create MoCaml tool for mock generation in OCaml
      - Describe a useful softare test pattern which is commonly used
        in OO programming, and make it useful in an FP context.
* Background
  - Mocking as a testing technique
    - Definition and examples of other test doubles
    - Extended example of mocks using java and ruby
    - Describe problems with test double patterns (overuse can create
      fragile tests; missuse can lead to tests that don't actually
      test the SUT)
      - See section in xUnit on State and Behaviour verification for
        thoughts on whether mocking is "worth it"
  - The OCaml language
    - Point of this section is to describe OCaml's module system, the
      camlp4 preprocessing tool (or perhaps extension points), and
  - Unit testing in functional programming languages
    - "State of the art" of testing in FP languages, specifically
      strongly typed languages, and even more specifically, OCaml.
    - Quickcheck (Haskell)
    - OUnit, HUnit (OCaml, Haskell)
    - Kaputt (OCaml) (has mock helper functions, doesn't generate mocks)
* Application
  - An API for mocks in OCaml
    - Describe a process for manually mocking ocaml modules, and use
      code examples.
    - Describe how I wrote code to automatically generate mock
      implementations of modules' interfaces
    - Demonstrate the use of this library.
* Reflection
  - Pause to reflect.
